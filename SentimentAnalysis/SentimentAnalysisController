public class SentimentAnalysisController {
    public class SentimentResult {
        @AuraEnabled
        public String sentiment { get; set; }
    }

    @AuraEnabled
    public static SentimentResult analyzeTextSentiment(String text) {
        SentimentResult result = new SentimentResult();
        
        string token = 'LEZU2U2ZJBIEQNJXIFCEOQSMIZLDGNKWJ5KDKNRXIFCVMR2RKM2VMQ2EK5LEMSRVGZDEKMS2JZDVIRBVGZGFESJWIZFEWUZSKBLUQNZTJVJEIUKTGNJFMU2HLBBUKTCMIZLDES2CGNNFGNSXKNMUIVSEJE3FKVKLGRJVS7COIE';

        // Make the API call to the Einstein API to analyze the text and get the sentiment result
        // Replace 'YOUR_EINSTEIN_API_ENDPOINT' with the actual endpoint of your Einstein API
        
        HttpRequest request = new HttpRequest();
        request.setEndpoint('https://api.einstein.ai/v2/language/sentiment');
        request.setMethod('POST');
        request.setHeader('Content-Type', 'application/json');
        request.setHeader('Authorization', 'Bearer ' + token);
		request.setBody('{"Cache-Control: no-cache" -H "Content-Type: multipart/form-data" -F "modelId=WJH4YCA7YX4PCWVNCYNWYHBMY4" -F "document=I cant tell you how much fun it was""}}');

        HttpResponse response = new Http().send(request);
        
        if (response.getStatusCode() == 200) {
            Map<String, Object> jsonResponse = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
            
            // Extract the sentiment from the response and set it in the result object
            result.sentiment = (String) jsonResponse.get('sentiment');
        } else {
            // Handle error cases
            // You may want to add error handling logic here, such as setting a default sentiment or throwing an exception
            // 
           //result.sentiment = String.valueOf(response.getStatusCode());
        }
        
        return result;
    }
}
